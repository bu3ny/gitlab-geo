---
- name: Configure GitLab and Related Services
  hosts: primary_gitlab_server
  remote_user: mostafa
  become: yes
  become_method: sudo
  vars_files:
    - vars/main.yml

  tasks:
    - name: Check if GitLab configuration file exists
      stat:
        path: /etc/gitlab/gitlab.rb
      register: gitlab_rb

    - name: Fail if GitLab configuration file does not exist
      fail:
        msg: "/etc/gitlab/gitlab.rb does not exist. Please ensure GitLab is installed and configured correctly."
      when: not gitlab_rb.stat.exists

    - name: Ensure gitlab_password variable is defined
      fail:
        msg: "gitlab_password variable is not defined. Please set this variable in your vars file."
      when: gitlab_password is not defined

    - name: Validate GitLab password complexity
      assert:
        that:
          - gitlab_password is match("(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#\$%^&*]).{12,}")
        fail_msg: "gitlab_password does not meet complexity requirements. It should contain at least one lowercase letter, one uppercase letter, one digit, one special character, and be at least 12 characters long."

    - name: Ensure gitlab_external_url variable is defined
      fail:
        msg: "gitlab_external_url variable is not defined. Please set this variable in your vars file."
      when: gitlab_external_url is not defined

    - name: Validate GitLab external URL
      assert:
        that:
          - gitlab_external_url is url
        fail_msg: "gitlab_external_url is not a valid URL."

    - name: Copy GitLab license file to /etc/gitlab
      copy:
        src: "{{ gitlab_license_file_path }}"
        dest: /etc/gitlab/license
        mode: '0644'
      when: gitlab_license_file_path is defined and gitlab_license_file_path != ""

    - block:
        - name: Comment out any existing gitlab_rails['initial_root_password'] lines
          lineinfile:
            path: /etc/gitlab/gitlab.rb
            regexp: "^gitlab_rails\\['initial_root_password'\\]"
            line: "# \\0"
            state: present

        - name: Remove any existing external_url lines
          command: sed -i '/^external_url/d' /etc/gitlab/gitlab.rb
          register: remove_external_url

        - name: Set GitLab initial root password
          lineinfile:
            path: /etc/gitlab/gitlab.rb
            line: "gitlab_rails['initial_root_password'] = '{{ gitlab_password }}'"
            create: yes

        - name: Configure GitLab's external URL
          lineinfile:
            path: /etc/gitlab/gitlab.rb
            line: "external_url '{{ gitlab_external_url }}'"
            create: yes

        - name: Configure GitLab License File
          blockinfile:
            path: /etc/gitlab/gitlab.rb
            block: |
              gitlab_rails['initial_license_file'] = '/etc/gitlab/license'
            marker: "# {mark} ANSIBLE MANAGED BLOCK LICENSE"
          when: gitlab_license_file_path is defined and gitlab_license_file_path != ""

        - name: Configure GitLab SMTP
          blockinfile:
            path: /etc/gitlab/gitlab.rb
            block: |
              gitlab_rails['smtp_enable'] = true
              gitlab_rails['smtp_address'] = '{{ smtp_address }}'
              gitlab_rails['smtp_port'] = {{ smtp_port }}
              gitlab_rails['smtp_enable_starttls_auto'] = true
            marker: "# {mark} ANSIBLE MANAGED BLOCK SMTP"

        - name: Configure GitLab LDAP
          blockinfile:
            path: /etc/gitlab/gitlab.rb
            block: |
              gitlab_rails['ldap_enabled'] = true
              gitlab_rails['ldap_servers'] = {
                'main' => {
                  'label' => 'LDAP',
                  'host' => '{{ ldap_host }}',
                  'port' => 389,
                  'uid' => 'sAMAccountName',
                  'bind_dn' => '{{ ldap_bind_dn }}',
                  'password' => '{{ ldap_password }}',
                  'encryption' => 'plain',
                  'verify_certificates' => false,
                  'timeout' => 20,
                  'active_directory' => true,
                  'base' => '{{ ldap_base }}',
                  'lowercase_usernames' => true,
                  'retry_empty_result_with_codes' => [80],
                  'allow_username_or_email_login' => true,
                  'block_auto_created_users' => false
                }
              }
            marker: "# {mark} ANSIBLE MANAGED BLOCK LDAP"

      notify: reconfigure gitlab

      rescue:
        - name: Set playbook status to FAILED
          set_fact:
            playbook_status: "FAILED"

        - name: Report failure
          debug:
            msg: "An error occurred. Task details: {{ ansible_failed_task }}"

      always:
        - name: Set playbook status to SUCCESS if not already set
          set_fact:
            playbook_status: "{{ playbook_status | default('SUCCESS') }}"

        - name: Ensure playbook execution status is recorded
          copy:
            content: "Playbook executed with status: {{ playbook_status }}\n"
            dest: "/tmp/configure_gitlab.log"
            remote_src: no

  handlers:
    - name: reconfigure gitlab
      command: gitlab-ctl reconfigure
